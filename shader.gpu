const vertexShaderSource =
`attribute vec3 aVertex;
attribute vec2 aTexCoord;

uniform mat4 uModelViewMatrix;
uniform mat4 uProjectionMatrix;
uniform bool uFullScreenQuad;

varying vec2 vTexCoord;

void main(void) {
    if(uFullScreenQuad) {
        gl_Position = vec4(aVertex, 1.0);
        vTexCoord = vec2(1.0 - aTexCoord.s, 1.0 - aTexCoord.t);
    } else {
        vTexCoord = aTexCoord;
        gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertex, 1.0);
    }
}
`;

const fragmentShaderSource =
`#ifdef GL_FRAGMENT_PRECISION_HIGH
  precision highp float;
#else
  precision mediump float;
#endif

uniform bool uUseTexture;
uniform sampler2D uSampler;
uniform vec4 uColor;

varying vec2 vTexCoord;

void main(void) {
    if(uUseTexture) {
        gl_FragColor = texture2D(uSampler, vTexCoord);
    } else {
        gl_FragColor = uColor;
    }
}
`;
